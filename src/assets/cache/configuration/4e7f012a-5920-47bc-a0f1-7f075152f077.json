[
    {
        "@id": "https://services.sentinel-hub.com/configuration/v1/wms/instances/4e7f01-YOUR-INSTANCEID-HERE/layers/__FIS_3_NDVI",
        "id": "__FIS_3_NDVI",
        "title": "__FIS_3_NDVI",
        "description": "",
        "styles": [
            {
                "name": "default",
                "description": "Default layer style",
                "evalScript": "//VERSION=3\nfunction index(x, y) {\n\treturn (x - y) / (x + y);\n}\n\nfunction isCloud (scl) {\n  if (scl == 3) { // SC_CLOUD_SHADOW\n    return false;\n  } else if (scl == 9) { // SC_CLOUD_HIGH_PROBA\n    return true; \n  } else if (scl == 8) { // SC_CLOUD_MEDIUM_PROBA\n    return true;\n  } else if (scl == 7) { // SC_CLOUD_LOW_PROBA\n    return false;\n  } else if (scl == 10) { // SC_THIN_CIRRUS\n    return true;\n  } else if (scl == 11) { // SC_SNOW_ICE\n    return false;\n  } else if (scl == 1) { // SC_SATURATED_DEFECTIVE\n    return false;\n  } else if (scl == 2) { // SC_DARK_FEATURE_SHADOW\n     return false;\n  }\n  return false;\n}\n\nconst cloud = isCloud (SCL)\nconst ndvi = index(B08, B04);\n//return cloud ? [Number.NaN, 1] : [ndvi, 0];\nreturn cloud ? [ndvi, 1] : [ndvi, 0];"
            }
        ],
        "orderHint": 0,
        "instance": {
            "@id": "https://services.sentinel-hub.com/configuration/v1/wms/instances/4e7f01-YOUR-INSTANCEID-HERE"
        },
        "lastUpdated": "2020-04-14T06:37:03.127588Z",
        "dataset": {
            "@id": "https://services.sentinel-hub.com/configuration/v1/datasets/S2L2A"
        },
        "datasetSource": {
            "@id": "https://services.sentinel-hub.com/configuration/v1/datasets/S2L2A/sources/2"
        },
        "defaultStyleName": "default",
        "datasourceDefaults": {
            "mosaickingOrder": "mostRecent",
            "temporal": false,
            "maxCloudCoverage": 100,
            "type": "S2L2A"
        }
    },
    {
        "@id": "https://services.sentinel-hub.com/configuration/v1/wms/instances/4e7f01-YOUR-INSTANCEID-HERE/layers/__FIS_5-MOISTURE-INDEX1",
        "id": "__FIS_5-MOISTURE-INDEX1",
        "title": "__FIS_5-MOISTURE-INDEX1",
        "description": "",
        "styles": [
            {
                "name": "default",
                "description": "Default layer style",
                "evalScript": "//VERSION=3\nfunction index(x, y) {\n\treturn (x - y) / (x + y);\n}\n\nfunction isCloud (scl) {\n  if (scl == 3) { // SC_CLOUD_SHADOW\n    return false;\n  } else if (scl == 9) { // SC_CLOUD_HIGH_PROBA\n    return true; \n  } else if (scl == 8) { // SC_CLOUD_MEDIUM_PROBA\n    return true;\n  } else if (scl == 7) { // SC_CLOUD_LOW_PROBA\n    return false;\n  } else if (scl == 10) { // SC_THIN_CIRRUS\n    return true;\n  } else if (scl == 11) { // SC_SNOW_ICE\n    return false;\n  } else if (scl == 1) { // SC_SATURATED_DEFECTIVE\n    return false;\n  } else if (scl == 2) { // SC_DARK_FEATURE_SHADOW\n     return false;\n  }\n  return false;\n}\n\nconst cloud = isCloud (SCL)\nconst value = index(B8A, B11);\n\nreturn cloud ? [value, 1] : [value, 0];"
            }
        ],
        "orderHint": 0,
        "instance": {
            "@id": "https://services.sentinel-hub.com/configuration/v1/wms/instances/4e7f01-YOUR-INSTANCEID-HERE"
        },
        "lastUpdated": "2020-04-14T06:37:03.133913Z",
        "dataset": {
            "@id": "https://services.sentinel-hub.com/configuration/v1/datasets/S2L2A"
        },
        "datasetSource": {
            "@id": "https://services.sentinel-hub.com/configuration/v1/datasets/S2L2A/sources/2"
        },
        "defaultStyleName": "default",
        "datasourceDefaults": {
            "mosaickingOrder": "mostRecent",
            "temporal": false,
            "maxCloudCoverage": 50,
            "type": "S2L2A"
        }
    },
    {
        "@id": "https://services.sentinel-hub.com/configuration/v1/wms/instances/4e7f01-YOUR-INSTANCEID-HERE/layers/__FIS_7-NDWI",
        "id": "__FIS_7-NDWI",
        "title": "__FIS_7-NDWI",
        "description": "",
        "styles": [
            {
                "name": "default",
                "description": "Default layer style",
                "evalScript": "//VERSION=3\nfunction index(x, y) {\n\treturn (x - y) / (x + y);\n}\n\nfunction isCloud (scl) {\n  if (scl == 3) { // SC_CLOUD_SHADOW\n    return false;\n  } else if (scl == 9) { // SC_CLOUD_HIGH_PROBA\n    return true; \n  } else if (scl == 8) { // SC_CLOUD_MEDIUM_PROBA\n    return true;\n  } else if (scl == 7) { // SC_CLOUD_LOW_PROBA\n    return false;\n  } else if (scl == 10) { // SC_THIN_CIRRUS\n    return true;\n  } else if (scl == 11) { // SC_SNOW_ICE\n    return false;\n  } else if (scl == 1) { // SC_SATURATED_DEFECTIVE\n    return false;\n  } else if (scl == 2) { // SC_DARK_FEATURE_SHADOW\n     return false;\n  }\n  return false;\n}\n\nconst cloud = isCloud (SCL)\nconst value = index(B03, B08);\n\nreturn cloud ? [value, 1] : [value, 0];"
            }
        ],
        "orderHint": 0,
        "instance": {
            "@id": "https://services.sentinel-hub.com/configuration/v1/wms/instances/4e7f01-YOUR-INSTANCEID-HERE"
        },
        "lastUpdated": "2020-04-14T06:37:03.139352Z",
        "dataset": {
            "@id": "https://services.sentinel-hub.com/configuration/v1/datasets/S2L2A"
        },
        "datasetSource": {
            "@id": "https://services.sentinel-hub.com/configuration/v1/datasets/S2L2A/sources/2"
        },
        "defaultStyleName": "default",
        "datasourceDefaults": {
            "mosaickingOrder": "mostRecent",
            "temporal": false,
            "maxCloudCoverage": 50,
            "type": "S2L2A"
        }
    },
    {
        "@id": "https://services.sentinel-hub.com/configuration/v1/wms/instances/4e7f01-YOUR-INSTANCEID-HERE/layers/1_TRUE_COLOR",
        "id": "1_TRUE_COLOR",
        "title": "True color",
        "description": "Based on bands 4,3,2",
        "styles": [
            {
                "name": "default",
                "description": "Default layer style",
                "evalScript": "//VERSION=3\nlet minVal = 0.0;\nlet maxVal = 0.4;\n\nlet viz = new HighlightCompressVisualizer(minVal, maxVal);\n\nfunction setup() {\n   return {\n    input: [\"B04\", \"B03\", \"B02\", \"dataMask\"],\n    output: { bands: 4 }\n  };\n}\n\nfunction evaluatePixel(samples) {\n    let val = [samples.B04, samples.B03, samples.B02, samples.dataMask];\n    return viz.processList(val);\n}"
            }
        ],
        "orderHint": 0,
        "instance": {
            "@id": "https://services.sentinel-hub.com/configuration/v1/wms/instances/4e7f01-YOUR-INSTANCEID-HERE"
        },
        "lastUpdated": "2020-04-14T06:37:03.101543Z",
        "dataset": {
            "@id": "https://services.sentinel-hub.com/configuration/v1/datasets/S2L2A"
        },
        "datasetSource": {
            "@id": "https://services.sentinel-hub.com/configuration/v1/datasets/S2L2A/sources/2"
        },
        "defaultStyleName": "default",
        "datasourceDefaults": {
            "upsampling": "BICUBIC",
            "mosaickingOrder": "mostRecent",
            "temporal": false,
            "maxCloudCoverage": 100,
            "previewMode": "EXTENDED_PREVIEW",
            "type": "S2L2A"
        }
    },
    {
        "@id": "https://services.sentinel-hub.com/configuration/v1/wms/instances/4e7f01-YOUR-INSTANCEID-HERE/layers/2_FALSE_COLOR",
        "id": "2_FALSE_COLOR",
        "title": "False color",
        "description": "Based on bands 8,4,3",
        "styles": [
            {
                "name": "NORMALIZED",
                "description": "Default layer style",
                "evalScript": "//VERSION=3\nlet minVal = 0.0;\nlet maxVal = 0.4;\n\nlet viz = new HighlightCompressVisualizer(minVal, maxVal);\n\nfunction evaluatePixel(samples) {\n    let val = [samples.B08, samples.B04, samples.B03, samples.dataMask];\n    return viz.processList(val);\n}\n\nfunction setup() {\n  return {\n    input: [\"B03\", \"B04\", \"B08\", \"dataMask\"],\n    output: { bands: 4 }\n  };\n}\n"
            }
        ],
        "orderHint": 10,
        "instance": {
            "@id": "https://services.sentinel-hub.com/configuration/v1/wms/instances/4e7f01-YOUR-INSTANCEID-HERE"
        },
        "lastUpdated": "2020-04-14T06:37:03.203403Z",
        "dataset": {
            "@id": "https://services.sentinel-hub.com/configuration/v1/datasets/S2L2A"
        },
        "datasetSource": {
            "@id": "https://services.sentinel-hub.com/configuration/v1/datasets/S2L2A/sources/2"
        },
        "defaultStyleName": "default",
        "datasourceDefaults": {
            "upsampling": "BICUBIC",
            "mosaickingOrder": "mostRecent",
            "temporal": false,
            "maxCloudCoverage": 20,
            "type": "S2L2A"
        }
    },
    {
        "@id": "https://services.sentinel-hub.com/configuration/v1/wms/instances/4e7f01-YOUR-INSTANCEID-HERE/layers/2_HIGHLIGHT-OPTIMIZED-NATURAL-COLOR",
        "id": "2_HIGHLIGHT-OPTIMIZED-NATURAL-COLOR",
        "title": "Highlight Optimized Natural Color",
        "description": "Enhanced natural color visualization",
        "styles": [
            {
                "name": "default",
                "description": "Default layer style",
                "evalScript": "//VERSION=3\nfunction setup() {\n   return {\n    input: [\"B04\", \"B03\", \"B02\", \"dataMask\"],\n    output: { bands: 4 }\n  };\n}\n\nfunction evaluatePixel(samples) {\n\tvar R = samples.B04 > 0.15 ? Math.cbrt(0.6 * samples.B04) : 2.9876031644 * samples.B04\n\tvar G = samples.B03 > 0.15 ? Math.cbrt(0.6 * samples.B03) : 2.9876031644 * samples.B03\n\tvar B = samples.B02 > 0.15 ? Math.cbrt(0.6 * samples.B02) : 2.9876031644 * samples.B02\n\treturn [R, G, B, samples.dataMask]\n}"
            }
        ],
        "orderHint": 0,
        "instance": {
            "@id": "https://services.sentinel-hub.com/configuration/v1/wms/instances/4e7f01-YOUR-INSTANCEID-HERE"
        },
        "lastUpdated": "2020-04-30T10:02:56.237064Z",
        "dataset": {
            "@id": "https://services.sentinel-hub.com/configuration/v1/datasets/S2L2A"
        },
        "datasetSource": {
            "@id": "https://services.sentinel-hub.com/configuration/v1/datasets/S2L2A/sources/2"
        },
        "defaultStyleName": "default",
        "datasourceDefaults": {
            "upsampling": "BICUBIC",
            "mosaickingOrder": "mostRecent",
            "temporal": false,
            "maxCloudCoverage": 50,
            "type": "S2L2A"
        }
    },
    {
        "@id": "https://services.sentinel-hub.com/configuration/v1/wms/instances/4e7f01-YOUR-INSTANCEID-HERE/layers/3_NDVI",
        "id": "3_NDVI",
        "title": "NDVI",
        "description": "Based on combination of bands (B8 - B4)/(B8 + B4)",
        "styles": [
            {
                "name": "default",
                "description": "Default layer style",
                "evalScript": "//VERSION=3\n\nfunction setup() {\n  return {\n    input: [\"B04\", \"B08\", \"SCL\", \"dataMask\"],\n    output: [\n      { id: \"default\", bands: 4 },\n      { id: \"index\", bands: 1, sampleType: \"FLOAT32\" },\n      { id: \"eobrowserStats\", bands: 2, sampleType: \"FLOAT32\" },\n      { id: \"dataMask\", bands: 1 },\n    ],\n  };\n}\n\nfunction evaluatePixel(samples) {\n  let val = index(samples.B08, samples.B04);\n  let imgVals = null;\n  // The library for tiffs works well only if there is only one channel returned.\n  // So we encode the \"no data\" as NaN here and ignore NaNs on frontend.\n  const indexVal = samples.dataMask === 1 ? val : NaN;\n\n  if (val < -0.5) imgVals = [0.05, 0.05, 0.05, samples.dataMask];\n  else if (val < -0.2) imgVals = [0.75, 0.75, 0.75, samples.dataMask];\n  else if (val < -0.1) imgVals = [0.86, 0.86, 0.86, samples.dataMask];\n  else if (val < 0) imgVals = [0.92, 0.92, 0.92, samples.dataMask];\n  else if (val < 0.025) imgVals = [1, 0.98, 0.8, samples.dataMask];\n  else if (val < 0.05) imgVals = [0.93, 0.91, 0.71, samples.dataMask];\n  else if (val < 0.075) imgVals = [0.87, 0.85, 0.61, samples.dataMask];\n  else if (val < 0.1) imgVals = [0.8, 0.78, 0.51, samples.dataMask];\n  else if (val < 0.125) imgVals = [0.74, 0.72, 0.42, samples.dataMask];\n  else if (val < 0.15) imgVals = [0.69, 0.76, 0.38, samples.dataMask];\n  else if (val < 0.175) imgVals = [0.64, 0.8, 0.35, samples.dataMask];\n  else if (val < 0.2) imgVals = [0.57, 0.75, 0.32, samples.dataMask];\n  else if (val < 0.25) imgVals = [0.5, 0.7, 0.28, samples.dataMask];\n  else if (val < 0.3) imgVals = [0.44, 0.64, 0.25, samples.dataMask];\n  else if (val < 0.35) imgVals = [0.38, 0.59, 0.21, samples.dataMask];\n  else if (val < 0.4) imgVals = [0.31, 0.54, 0.18, samples.dataMask];\n  else if (val < 0.45) imgVals = [0.25, 0.49, 0.14, samples.dataMask];\n  else if (val < 0.5) imgVals = [0.19, 0.43, 0.11, samples.dataMask];\n  else if (val < 0.55) imgVals = [0.13, 0.38, 0.07, samples.dataMask];\n  else if (val < 0.6) imgVals = [0.06, 0.33, 0.04, samples.dataMask];\n  else imgVals = [0, 0.27, 0, samples.dataMask];\n\n  return {\n    default: imgVals,\n    index: [indexVal],\n    eobrowserStats: [val, isCloud(samples.SCL) ? 1 : 0],\n    dataMask: [samples.dataMask],\n  };\n}\n\nfunction isCloud(scl) {\n  if (scl == 3) {\n    // SC_CLOUD_SHADOW\n    return false;\n  } else if (scl == 9) {\n    // SC_CLOUD_HIGH_PROBA\n    return true;\n  } else if (scl == 8) {\n    // SC_CLOUD_MEDIUM_PROBA\n    return true;\n  } else if (scl == 7) {\n    // SC_CLOUD_LOW_PROBA\n    return false;\n  } else if (scl == 10) {\n    // SC_THIN_CIRRUS\n    return true;\n  } else if (scl == 11) {\n    // SC_SNOW_ICE\n    return false;\n  } else if (scl == 1) {\n    // SC_SATURATED_DEFECTIVE\n    return false;\n  } else if (scl == 2) {\n    // SC_DARK_FEATURE_SHADOW\n    return false;\n  }\n  return false;\n}\n",
                "legend": {
                    "type": "continuous",
                    "gradients": [
                        {
                            "color": "rgb(0%,0%,0%)",
                            "position": 0
                        },
                        {
                            "color": "rgb(0%,0%,0%)",
                            "label": "- 1.0",
                            "position": 0.05
                        },
                        {
                            "color": "rgb(75%,75%,75%)",
                            "position": 0.050001
                        },
                        {
                            "color": "rgb(75%,75%,75%)",
                            "position": 0.1
                        },
                        {
                            "color": "rgb(86%,86%,86%)",
                            "position": 0.10001
                        },
                        {
                            "color": "rgb(86%,86%,86%)",
                            "position": 0.15
                        },
                        {
                            "color": "rgb(100%,100%,88%)",
                            "position": 0.150001
                        },
                        {
                            "color": "rgb(100%,100%,88%)",
                            "label": "0.0",
                            "position": 0.2
                        },
                        {
                            "color": "rgb(100%,98%,80%)",
                            "position": 0.20001
                        },
                        {
                            "color": "rgb(100%,98%,80%)",
                            "position": 0.25
                        },
                        {
                            "color": "rgb(93%,91%,71%)",
                            "position": 0.250001
                        },
                        {
                            "color": "rgb(93%,91%,71%)",
                            "position": 0.3
                        },
                        {
                            "color": "rgb(87%,85%,61%)",
                            "position": 0.30001
                        },
                        {
                            "color": "rgb(87%,85%,61%)",
                            "position": 0.35
                        },
                        {
                            "color": "rgb(80%,78%,51%)",
                            "position": 0.350001
                        },
                        {
                            "color": "rgb(80%,78%,51%)",
                            "position": 0.4
                        },
                        {
                            "color": "rgb(74%,72%,42%)",
                            "position": 0.40001
                        },
                        {
                            "color": "rgb(74%,72%,42%)",
                            "position": 0.45
                        },
                        {
                            "color": "rgb(69%,76%,38%)",
                            "position": 0.450001
                        },
                        {
                            "color": "rgb(69%,76%,38%)",
                            "position": 0.5
                        },
                        {
                            "color": "rgb(64%,80%,35%)",
                            "position": 0.50001
                        },
                        {
                            "color": "rgb(64%,80%,35%)",
                            "position": 0.55
                        },
                        {
                            "color": "rgb(57%,75%,32%)",
                            "position": 0.550001
                        },
                        {
                            "color": "rgb(57%,75%,32%)",
                            "label": "0.2",
                            "position": 0.6
                        },
                        {
                            "color": "rgb(50%,70%,28%)",
                            "position": 0.60001
                        },
                        {
                            "color": "rgb(50%,70%,28%)",
                            "position": 0.65
                        },
                        {
                            "color": "rgb(44%,64%,25%)",
                            "position": 0.650001
                        },
                        {
                            "color": "rgb(44%,64%,25%)",
                            "position": 0.7
                        },
                        {
                            "color": "rgb(38%,59%,21%)",
                            "position": 0.70001
                        },
                        {
                            "color": "rgb(38%,59%,21%)",
                            "position": 0.75
                        },
                        {
                            "color": "rgb(31%,54%,18%)",
                            "position": 0.750001
                        },
                        {
                            "color": "rgb(31%,54%,18%)",
                            "position": 0.8
                        },
                        {
                            "color": "rgb(25%,49%,14%)",
                            "position": 0.80001
                        },
                        {
                            "color": "rgb(25%,49%,14%)",
                            "position": 0.85
                        },
                        {
                            "color": "rgb(19%,43%,11%)",
                            "position": 0.850001
                        },
                        {
                            "color": "rgb(19%,43%,11%)",
                            "position": 0.9
                        },
                        {
                            "color": "rgb(13%,38%,7%)",
                            "position": 0.90001
                        },
                        {
                            "color": "rgb(13%,38%,7%)",
                            "position": 0.95
                        },
                        {
                            "color": "rgb(6%,33%,4%)",
                            "position": 0.950001
                        },
                        {
                            "color": "rgb(6%,33%,4%)",
                            "position": 0.990001
                        },
                        {
                            "color": "rgb(0%,27%,0%)",
                            "label": "0.6",
                            "position": 1
                        },
                        {
                            "color": "rgb(0%,27%,0%)",
                            "position": 1.05
                        }
                    ],
                    "maxPosition": 1.05,
                    "minPosition": 0
                }
            }
        ],
        "orderHint": 30,
        "instance": {
            "@id": "https://services.sentinel-hub.com/configuration/v1/wms/instances/4e7f01-YOUR-INSTANCEID-HERE"
        },
        "lastUpdated": "2020-04-30T10:03:35.574141Z",
        "dataset": {
            "@id": "https://services.sentinel-hub.com/configuration/v1/datasets/S2L2A"
        },
        "datasetSource": {
            "@id": "https://services.sentinel-hub.com/configuration/v1/datasets/S2L2A/sources/2"
        },
        "defaultStyleName": "default",
        "datasourceDefaults": {
            "mosaickingOrder": "mostRecent",
            "temporal": false,
            "maxCloudCoverage": 20,
            "type": "S2L2A"
        }
    },
    {
        "@id": "https://services.sentinel-hub.com/configuration/v1/wms/instances/4e7f01-YOUR-INSTANCEID-HERE/layers/4-FALSE-COLOR-URBAN",
        "id": "4-FALSE-COLOR-URBAN",
        "title": "False color (urban)",
        "description": "Based on bands 12,11,4",
        "styles": [
            {
                "name": "default",
                "description": "Default layer style",
                "evalScript": "//VERSION=3\nlet minVal = 0.0;\nlet maxVal = 0.4;\n\nlet viz = new HighlightCompressVisualizer(minVal, maxVal);\n\nfunction setup() {\n  return {\n    input: [\"B12\", \"B11\", \"B04\",\"dataMask\"],\n    output: { bands: 4 }\n  };\n}\n\nfunction evaluatePixel(samples) {\n  let val = [samples.B12, samples.B11, samples.B04,samples.dataMask];\n  return viz.processList(val);\n}\n"
            }
        ],
        "orderHint": 0,
        "instance": {
            "@id": "https://services.sentinel-hub.com/configuration/v1/wms/instances/4e7f01-YOUR-INSTANCEID-HERE"
        },
        "lastUpdated": "2023-09-19T08:49:27.921506Z",
        "dataset": {
            "@id": "https://services.sentinel-hub.com/configuration/v1/datasets/S2L2A"
        },
        "datasetSource": {
            "@id": "https://services.sentinel-hub.com/configuration/v1/datasets/S2L2A/sources/2"
        },
        "defaultStyleName": "default",
        "datasourceDefaults": {
            "mosaickingOrder": "mostRecent",
            "temporal": false,
            "maxCloudCoverage": 50,
            "type": "S2L2A"
        }
    },
    {
        "@id": "https://services.sentinel-hub.com/configuration/v1/wms/instances/4e7f01-YOUR-INSTANCEID-HERE/layers/5-MOISTURE-INDEX1",
        "id": "5-MOISTURE-INDEX1",
        "title": "Moisture index",
        "description": "Based on combination of bands (B8A - B11)/(B8A + B11)",
        "styles": [
            {
                "name": "default",
                "description": "Default layer style",
                "evalScript": "//VERSION=3\nconst moistureRamps = [\n  [-0.8, 0x800000],\n  [-0.24, 0xff0000],\n  [-0.032, 0xffff00],\n  [0.032, 0x00ffff],\n  [0.24, 0x0000ff],\n  [0.8, 0x000080],\n];\n\nconst viz = new ColorRampVisualizer(moistureRamps);\n\nfunction setup() {\n  return {\n    input: [\"B8A\", \"B11\", \"SCL\", \"dataMask\"],\n    output: [\n      { id: \"default\", bands: 4 },\n      { id: \"index\", bands: 1, sampleType: \"FLOAT32\" },\n      { id: \"eobrowserStats\", bands: 2, sampleType: \"FLOAT32\" },\n      { id: \"dataMask\", bands: 1 },\n    ],\n  };\n}\n\nfunction evaluatePixel(samples) {\n  let val = index(samples.B8A, samples.B11);\n  // The library for tiffs works well only if there is only one channel returned.\n  // So we encode the \"no data\" as NaN here and ignore NaNs on frontend.\n  const indexVal = samples.dataMask === 1 ? val : NaN;\n  return {\n    default: [...viz.process(val), samples.dataMask],\n    index: [indexVal],\n    eobrowserStats: [val, isCloud(samples.SCL) ? 1 : 0],\n    dataMask: [samples.dataMask],\n  };\n}\n\nfunction isCloud(scl) {\n  if (scl == 3) {\n    // SC_CLOUD_SHADOW\n    return false;\n  } else if (scl == 9) {\n    // SC_CLOUD_HIGH_PROBA\n    return true;\n  } else if (scl == 8) {\n    // SC_CLOUD_MEDIUM_PROBA\n    return true;\n  } else if (scl == 7) {\n    // SC_CLOUD_LOW_PROBA\n    return false;\n  } else if (scl == 10) {\n    // SC_THIN_CIRRUS\n    return true;\n  } else if (scl == 11) {\n    // SC_SNOW_ICE\n    return false;\n  } else if (scl == 1) {\n    // SC_SATURATED_DEFECTIVE\n    return false;\n  } else if (scl == 2) {\n    // SC_DARK_FEATURE_SHADOW\n    return false;\n  }\n  return false;\n}\n",
                "legend": {
                    "type": "continuous",
                    "gradients": [
                        {
                            "color": "rgb(50%,0%,0%)",
                            "label": "< -0.8",
                            "position": -0.8
                        },
                        {
                            "color": "rgb(100%,0%,0%)",
                            "label": "-0.24",
                            "position": -0.64
                        },
                        {
                            "color": "rgb(100%,100%,0%)",
                            "label": "-0.032",
                            "position": -0.32
                        },
                        {
                            "label": "0",
                            "position": 0
                        },
                        {
                            "color": "rgb(0%,100%,100%)",
                            "label": "0.032",
                            "position": 0.32
                        },
                        {
                            "color": "rgb(0%,0%,100%)",
                            "label": "0.24",
                            "position": 0.64
                        },
                        {
                            "color": "rgb(0%,0%,50%)",
                            "label": "> 0.8",
                            "position": 0.8
                        }
                    ],
                    "maxPosition": 0.8,
                    "minPosition": -0.8
                }
            }
        ],
        "orderHint": 40,
        "instance": {
            "@id": "https://services.sentinel-hub.com/configuration/v1/wms/instances/4e7f01-YOUR-INSTANCEID-HERE"
        },
        "lastUpdated": "2020-04-30T10:03:49.822497Z",
        "dataset": {
            "@id": "https://services.sentinel-hub.com/configuration/v1/datasets/S2L2A"
        },
        "datasetSource": {
            "@id": "https://services.sentinel-hub.com/configuration/v1/datasets/S2L2A/sources/2"
        },
        "defaultStyleName": "default",
        "datasourceDefaults": {
            "mosaickingOrder": "mostRecent",
            "temporal": false,
            "maxCloudCoverage": 50,
            "type": "S2L2A"
        }
    },
    {
        "@id": "https://services.sentinel-hub.com/configuration/v1/wms/instances/4e7f01-YOUR-INSTANCEID-HERE/layers/6-SWIR",
        "id": "6-SWIR",
        "title": "SWIR",
        "description": "Based on bands 12,8A,4",
        "styles": [
            {
                "name": "default",
                "description": "Default layer style",
                "evalScript": "//VERSION=3\nlet minVal = 0.0;\nlet maxVal = 0.4;\n\nlet viz = new HighlightCompressVisualizer(minVal, maxVal);\n\nfunction setup() {\n  return {\n    input: [\"B12\", \"B8A\", \"B04\", \"dataMask\"],\n    output: { bands: 4 }\n  };\n}\n\nfunction evaluatePixel(samples) {\n    let val = [samples.B12, samples.B8A, samples.B04, samples.dataMask];\n    return viz.processList(val);\n}"
            }
        ],
        "orderHint": 50,
        "instance": {
            "@id": "https://services.sentinel-hub.com/configuration/v1/wms/instances/4e7f01-YOUR-INSTANCEID-HERE"
        },
        "lastUpdated": "2020-04-30T10:03:56.921894Z",
        "dataset": {
            "@id": "https://services.sentinel-hub.com/configuration/v1/datasets/S2L2A"
        },
        "datasetSource": {
            "@id": "https://services.sentinel-hub.com/configuration/v1/datasets/S2L2A/sources/2"
        },
        "defaultStyleName": "default",
        "datasourceDefaults": {
            "mosaickingOrder": "mostRecent",
            "temporal": false,
            "maxCloudCoverage": 50,
            "type": "S2L2A"
        }
    },
    {
        "@id": "https://services.sentinel-hub.com/configuration/v1/wms/instances/4e7f01-YOUR-INSTANCEID-HERE/layers/7-NDWI",
        "id": "7-NDWI",
        "title": "NDWI",
        "description": "Based on combination of bands (B3 - B8)/(B3 + B8)",
        "styles": [
            {
                "name": "default",
                "description": "Default layer style",
                "evalScript": "//VERSION=3\n//ndwi\nconst colorRamp1 = [\n  [0, 0xffffff],\n  [1, 0x008000],\n];\nconst colorRamp2 = [\n  [0, 0xffffff],\n  [1, 0x0000cc],\n];\n\nlet viz1 = new ColorRampVisualizer(colorRamp1);\nlet viz2 = new ColorRampVisualizer(colorRamp2);\n\nfunction setup() {\n  return {\n    input: [\"B03\", \"B08\", \"SCL\", \"dataMask\"],\n    output: [\n      { id: \"default\", bands: 4 },\n      { id: \"index\", bands: 1, sampleType: \"FLOAT32\" },\n      { id: \"eobrowserStats\", bands: 2, sampleType: \"FLOAT32\" },\n      { id: \"dataMask\", bands: 1 },\n    ],\n  };\n}\n\nfunction evaluatePixel(samples) {\n  let val = index(samples.B03, samples.B08);\n  let imgVals = null;\n  // The library for tiffs works well only if there is only one channel returned.\n  // So we encode the \"no data\" as NaN here and ignore NaNs on frontend.\n  const indexVal = samples.dataMask === 1 ? val : NaN;\n\n  if (val < -0) {\n    imgVals = [...viz1.process(-val), samples.dataMask];\n  } else {\n    imgVals = [...viz2.process(Math.sqrt(Math.sqrt(val))), samples.dataMask];\n  }\n  return {\n    default: imgVals,\n    index: [indexVal],\n    eobrowserStats: [val, isCloud(samples.SCL) ? 1 : 0],\n    dataMask: [samples.dataMask],\n  };\n}\n\nfunction isCloud(scl) {\n  if (scl == 3) {\n    // SC_CLOUD_SHADOW\n    return false;\n  } else if (scl == 9) {\n    // SC_CLOUD_HIGH_PROBA\n    return true;\n  } else if (scl == 8) {\n    // SC_CLOUD_MEDIUM_PROBA\n    return true;\n  } else if (scl == 7) {\n    // SC_CLOUD_LOW_PROBA\n    return false;\n  } else if (scl == 10) {\n    // SC_THIN_CIRRUS\n    return true;\n  } else if (scl == 11) {\n    // SC_SNOW_ICE\n    return false;\n  } else if (scl == 1) {\n    // SC_SATURATED_DEFECTIVE\n    return false;\n  } else if (scl == 2) {\n    // SC_DARK_FEATURE_SHADOW\n    return false;\n  }\n  return false;\n}\n"
            }
        ],
        "orderHint": 60,
        "instance": {
            "@id": "https://services.sentinel-hub.com/configuration/v1/wms/instances/4e7f01-YOUR-INSTANCEID-HERE"
        },
        "lastUpdated": "2020-04-30T10:04:04.159122Z",
        "dataset": {
            "@id": "https://services.sentinel-hub.com/configuration/v1/datasets/S2L2A"
        },
        "datasetSource": {
            "@id": "https://services.sentinel-hub.com/configuration/v1/datasets/S2L2A/sources/2"
        },
        "defaultStyleName": "default",
        "datasourceDefaults": {
            "mosaickingOrder": "mostRecent",
            "temporal": false,
            "maxCloudCoverage": 50,
            "type": "S2L2A"
        }
    },
    {
        "@id": "https://services.sentinel-hub.com/configuration/v1/wms/instances/4e7f01-YOUR-INSTANCEID-HERE/layers/SCENE-CLASSIFICATION",
        "id": "SCENE-CLASSIFICATION",
        "title": "Scene classification map",
        "description": "Classification of Sentinel2 data as result of ESA's Scene classification algorithm.",
        "styles": [
            {
                "name": "default",
                "description": "Default layer style",
                "evalScript": "//VERSION=3\n\n function RGBToColor (r, g, b, dataMask){\n\treturn [r/255, g/255, b/255, dataMask];\n}\n\nfunction setup() {\n   return {\n    input: [\"SCL\", \"dataMask\"],\n    output: { bands: 4 }\n  };\n}\n\nfunction evaluatePixel(samples) {\n    const SCL=samples.SCL;\n    switch (SCL) {\n    // No Data (Missing data) (black)    \n    case 0: return RGBToColor (0, 0, 0, samples.dataMask);\n        \n    // Saturated or defective pixel (red)   \n    case 1: return RGBToColor (255, 0, 0, samples.dataMask);\n\n    // Dark features / Shadows (very dark grey)\n    case 2: return RGBToColor (47,  47,  47, samples.dataMask);\n        \n    // Cloud shadows (dark brown)\n    case 3: return RGBToColor (100, 50, 0, samples.dataMask);\n        \n    // Vegetation (green)\n    case 4: return RGBToColor (0, 160, 0, samples.dataMask);\n        \n    // Not-vegetated (dark yellow)\n    case 5: return RGBToColor (255, 230, 90, samples.dataMask);\n        \n    // Water (dark and bright) (blue)\n    case 6: return RGBToColor (0, 0, 255, samples.dataMask);\n    \n    // Unclassified (dark grey)\n    case 7: return RGBToColor (128, 128, 128, samples.dataMask);\n    \n    // Cloud medium probability (grey)\n    case 8: return RGBToColor (192, 192, 192, samples.dataMask);\n        \n    // Cloud high probability (white)\n    case 9: return RGBToColor (255, 255, 255, samples.dataMask);\n    \n    // Thin cirrus (very bright blue)\n    case 10: return RGBToColor (100, 200, 255, samples.dataMask);\n        \n    // Snow or ice (very bright pink)\n    case 11: return RGBToColor (255, 150, 255, samples.dataMask);\n\n    default : return RGBToColor (0, 0, 0, samples.dataMask);  \n    }\n}",
                "legend": {
                    "type": "discrete",
                    "items": [
                        {
                            "color": "#000000",
                            "label": "No Data (Missing data)"
                        },
                        {
                            "color": "#ff0000",
                            "label": "Saturated or defective pixel"
                        },
                        {
                            "color": "#2f2f2f",
                            "label": "Dark features / Shadows "
                        },
                        {
                            "color": "#643200",
                            "label": "Cloud shadows"
                        },
                        {
                            "color": "#00a000",
                            "label": "Vegetation"
                        },
                        {
                            "color": "#ffe65a",
                            "label": "Not-vegetated"
                        },
                        {
                            "color": "#0000ff",
                            "label": "Water"
                        },
                        {
                            "color": "#808080",
                            "label": "Unclassified"
                        },
                        {
                            "color": "#c0c0c0",
                            "label": "Cloud medium probability"
                        },
                        {
                            "color": "#ffffff",
                            "label": "Cloud high probability"
                        },
                        {
                            "color": "#64c8ff",
                            "label": "Thin cirrus"
                        },
                        {
                            "color": "#ff96ff",
                            "label": "Snow or ice"
                        }
                    ]
                }
            }
        ],
        "orderHint": 0,
        "instance": {
            "@id": "https://services.sentinel-hub.com/configuration/v1/wms/instances/4e7f01-YOUR-INSTANCEID-HERE"
        },
        "lastUpdated": "2020-04-30T10:03:07.270802Z",
        "dataset": {
            "@id": "https://services.sentinel-hub.com/configuration/v1/datasets/S2L2A"
        },
        "datasetSource": {
            "@id": "https://services.sentinel-hub.com/configuration/v1/datasets/S2L2A/sources/2"
        },
        "defaultStyleName": "default",
        "datasourceDefaults": {
            "upsampling": "NEAREST",
            "downsampling": "NEAREST",
            "mosaickingOrder": "mostRecent",
            "temporal": false,
            "maxCloudCoverage": 100,
            "type": "S2L2A"
        }
    }
]