[
    {
        "@id": "https://services.sentinel-hub.com/configuration/v1/wms/instances/146ebe-YOUR-INSTANCEID-HERE/layers/__FIS_BURN-AREA-INDEX-BAI",
        "id": "__FIS_BURN-AREA-INDEX-BAI",
        "title": "__FIS_BURN-AREA-INDEX-BAI",
        "description": "",
        "styles": [
            {
                "name": "default",
                "description": "Default layer style",
                "evalScript": "//VERSION=3\nlet minVal = 0.0;\nlet maxVal = 100.0;\n\n\nlet a = 0.1 - B04;\nlet b = 0.06 - B08;\n\nlet d = a*a + b*b;\n\nconst NGDR = index(B03, B04);\nconst bRatio = (B03 - 0.175) / (0.39 - 0.175);\n\nconst isCloud = bRatio > 1 || (bRatio > 0 && NGDR > 0);\nconst value = d != 0 ? 1.0 / d : JAVA_DOUBLE_MAX_VAL;\n\nreturn isCloud ? [value, 1] : [value, 0];\n"
            }
        ],
        "orderHint": 0,
        "instance": {
            "@id": "https://services.sentinel-hub.com/configuration/v1/wms/instances/146ebe-YOUR-INSTANCEID-HERE"
        },
        "lastUpdated": "2020-04-09T14:24:38.372866Z",
        "dataset": {
            "@id": "https://services.sentinel-hub.com/configuration/v1/datasets/S2L1C"
        },
        "datasetSource": {
            "@id": "https://services.sentinel-hub.com/configuration/v1/datasets/S2L1C/sources/1"
        },
        "defaultStyleName": "default",
        "datasourceDefaults": {
            "mosaickingOrder": "mostRecent",
            "temporal": false,
            "maxCloudCoverage": 50,
            "type": "S2L1C"
        }
    },
    {
        "@id": "https://services.sentinel-hub.com/configuration/v1/wms/instances/146ebe-YOUR-INSTANCEID-HERE/layers/__FIS_MOISTURE-INDEX",
        "id": "__FIS_MOISTURE-INDEX",
        "title": "__FIS_MOISTURE-INDEX",
        "description": "",
        "styles": [
            {
                "name": "default",
                "description": "Default layer style",
                "evalScript": "//VERSION=3\nfunction index(x, y) {\n\treturn (x - y) / (x + y);\n}\n\nconst NGDR = index(B03, B04);\nconst bRatio = (B03 - 0.175) / (0.39 - 0.175);\n\nconst isCloud = bRatio > 1 || (bRatio > 0 && NGDR > 0);\nconst value = index(B8A, B11);\n//return cloud ? [Number.NaN, 1] : [ndvi, 0];\nreturn isCloud ? [value, 1] : [value, 0];\n\n"
            }
        ],
        "orderHint": 0,
        "instance": {
            "@id": "https://services.sentinel-hub.com/configuration/v1/wms/instances/146ebe-YOUR-INSTANCEID-HERE"
        },
        "lastUpdated": "2020-04-09T14:24:38.381114Z",
        "dataset": {
            "@id": "https://services.sentinel-hub.com/configuration/v1/datasets/S2L1C"
        },
        "datasetSource": {
            "@id": "https://services.sentinel-hub.com/configuration/v1/datasets/S2L1C/sources/1"
        },
        "defaultStyleName": "default",
        "datasourceDefaults": {
            "mosaickingOrder": "mostRecent",
            "temporal": false,
            "maxCloudCoverage": 50,
            "type": "S2L1C"
        }
    },
    {
        "@id": "https://services.sentinel-hub.com/configuration/v1/wms/instances/146ebe-YOUR-INSTANCEID-HERE/layers/__FIS_NORMALIZED-BURN-RATIO",
        "id": "__FIS_NORMALIZED-BURN-RATIO",
        "title": "__FIS_NORMALIZED-BURN-RATIO-NBR",
        "description": "",
        "styles": [
            {
                "name": "default",
                "description": "Default layer style",
                "evalScript": "//VERSION=3\nconst NGDR = index(B03, B04);\nconst bRatio = (B03 - 0.175) / (0.39 - 0.175);\nconst isCloud = bRatio > 1 || (bRatio > 0 && NGDR > 0);\nlet value = index(B08, B12);\n\nreturn isCloud ? [value, 1] : [value, 0];\n"
            }
        ],
        "orderHint": 0,
        "instance": {
            "@id": "https://services.sentinel-hub.com/configuration/v1/wms/instances/146ebe-YOUR-INSTANCEID-HERE"
        },
        "lastUpdated": "2020-06-09T08:48:18.702372Z",
        "dataset": {
            "@id": "https://services.sentinel-hub.com/configuration/v1/datasets/S2L1C"
        },
        "datasetSource": {
            "@id": "https://services.sentinel-hub.com/configuration/v1/datasets/S2L1C/sources/1"
        },
        "defaultStyleName": "default",
        "datasourceDefaults": {
            "mosaickingOrder": "mostRecent",
            "temporal": false,
            "maxCloudCoverage": 50,
            "type": "S2L1C"
        }
    },
    {
        "@id": "https://services.sentinel-hub.com/configuration/v1/wms/instances/146ebe-YOUR-INSTANCEID-HERE/layers/1_FALSE-COLOR",
        "id": "1_FALSE-COLOR",
        "title": "False color",
        "description": "Based on bands 8, 4, 3",
        "styles": [
            {
                "name": "default",
                "description": "Default layer style",
                "evalScript": "//VERSION=3\nlet minVal = 0.0;\nlet maxVal = 0.4;\n\nlet viz = new HighlightCompressVisualizer(minVal, maxVal);\n\nfunction setup() {\n  return {\n    input: [\"B03\", \"B04\", \"B08\",\"dataMask\"],\n    output: { bands: 4 }\n  };\n}\n\n\nfunction evaluatePixel(samples) {\n    let val = [samples.B08, samples.B04, samples.B03,samples.dataMask];\n    return viz.processList(val);\n}"
            }
        ],
        "orderHint": 0,
        "instance": {
            "@id": "https://services.sentinel-hub.com/configuration/v1/wms/instances/146ebe-YOUR-INSTANCEID-HERE"
        },
        "lastUpdated": "2020-09-18T06:41:41.708221Z",
        "dataset": {
            "@id": "https://services.sentinel-hub.com/configuration/v1/datasets/S2L1C"
        },
        "datasetSource": {
            "@id": "https://services.sentinel-hub.com/configuration/v1/datasets/S2L1C/sources/1"
        },
        "defaultStyleName": "default",
        "datasourceDefaults": {
            "upsampling": "BICUBIC",
            "mosaickingOrder": "mostRecent",
            "temporal": false,
            "maxCloudCoverage": 20,
            "type": "S2L1C"
        }
    },
    {
        "@id": "https://services.sentinel-hub.com/configuration/v1/wms/instances/146ebe-YOUR-INSTANCEID-HERE/layers/ATMOSPHERIC-PENETRATION",
        "id": "ATMOSPHERIC-PENETRATION",
        "title": "Atmospheric Penetration",
        "description": "Based on bands B12, B11, B8A",
        "styles": [
            {
                "name": "default",
                "description": "Default layer style",
                "evalScript": "//VERSION=3 (auto-converted from 1)\n\nlet minVal = 0.0;\nlet maxVal = 0.4;\n\nlet viz = new HighlightCompressVisualizer(minVal, maxVal);\n\nfunction evaluatePixel(samples) {\n    let val = [samples.B12, samples.B11, samples.B8A, samples.dataMask];\n    return viz.processList(val);\n}\n\nfunction setup() {\n  return {\n    input: [{\n      bands: [ \"B12\", \"B11\", \"B8A\", \"dataMask\" ]\n    }],\n    output: { bands: 4 }  }\n}"
            }
        ],
        "orderHint": 0,
        "instance": {
            "@id": "https://services.sentinel-hub.com/configuration/v1/wms/instances/146ebe-YOUR-INSTANCEID-HERE"
        },
        "lastUpdated": "2020-04-09T14:24:38.290188Z",
        "dataset": {
            "@id": "https://services.sentinel-hub.com/configuration/v1/datasets/S2L1C"
        },
        "datasetSource": {
            "@id": "https://services.sentinel-hub.com/configuration/v1/datasets/S2L1C/sources/1"
        },
        "defaultStyleName": "default",
        "datasourceDefaults": {
            "mosaickingOrder": "mostRecent",
            "temporal": false,
            "maxCloudCoverage": 20,
            "type": "S2L1C"
        }
    },
    {
        "@id": "https://services.sentinel-hub.com/configuration/v1/wms/instances/146ebe-YOUR-INSTANCEID-HERE/layers/BURN-AREA-INDEX-BAI",
        "id": "BURN-AREA-INDEX-BAI",
        "title": "Burn Area Index (BAI)",
        "description": "",
        "styles": [
            {
                "name": "default",
                "description": "Default layer style",
                "evalScript": "//VERSION=3\n\nlet minVal = 0.0;\nlet maxVal = 100.0;\n\nlet viz = ColorGradientVisualizer.createRedTemperature(minVal, maxVal);\n\nfunction setup() {\n  return {\n    input: [\n      {\n        bands: [\"B03\", \"B04\", \"B08\", \"dataMask\"],\n      },\n    ],\n    output: [\n      { id: \"default\", bands: 4 },\n      { id: \"index\", bands: 1, sampleType: \"FLOAT32\" },\n      { id: \"eobrowserStats\", bands: 2, sampleType: \"FLOAT32\" },\n      { id: \"dataMask\", bands: 1 },\n    ],\n  };\n}\n\nfunction evaluatePixel(samples) {\n  let a = 0.1 - samples.B04;\n  let b = 0.06 - samples.B08;\n\n  let d = a * a + b * b;\n\n  let val = d != 0 ? 1.0 / d : JAVA_DOUBLE_MAX_VAL;\n  let imgVals = null;\n  // The library for tiffs works well only if there is only one channel returned.\n  // So we encode the \"no data\" as NaN here and ignore NaNs on frontend.\n  const indexVal =\n    samples.dataMask === 1 && val >= minVal && val <= maxVal ? val : NaN;\n  imgVals = [...viz.process(val), samples.dataMask];\n\n  return {\n    default: imgVals,\n    index: [indexVal],\n    eobrowserStats: [val, isCloud(samples) ? 1 : 0],\n    dataMask: [samples.dataMask],\n  };\n}\n\nfunction isCloud(samples) {\n  const NGDR = index(samples.B03, samples.B04);\n  const bRatio = (samples.B03 - 0.175) / (0.39 - 0.175);\n  return bRatio > 1 || (bRatio > 0 && NGDR > 0);\n}"
            }
        ],
        "orderHint": 0,
        "instance": {
            "@id": "https://services.sentinel-hub.com/configuration/v1/wms/instances/146ebe-YOUR-INSTANCEID-HERE"
        },
        "lastUpdated": "2020-04-09T14:24:38.301698Z",
        "dataset": {
            "@id": "https://services.sentinel-hub.com/configuration/v1/datasets/S2L1C"
        },
        "datasetSource": {
            "@id": "https://services.sentinel-hub.com/configuration/v1/datasets/S2L1C/sources/1"
        },
        "defaultStyleName": "default",
        "datasourceDefaults": {
            "mosaickingOrder": "mostRecent",
            "temporal": false,
            "maxCloudCoverage": 20,
            "type": "S2L1C"
        }
    },
    {
        "@id": "https://services.sentinel-hub.com/configuration/v1/wms/instances/146ebe-YOUR-INSTANCEID-HERE/layers/BURNED-AREAS-DETECTION",
        "id": "BURNED-AREAS-DETECTION",
        "title": "Burned Areas Detection",
        "description": "",
        "styles": [
            {
                "name": "default",
                "description": "Default layer style",
                "evalScript": "//VERSION=3\nfunction setup() {\n    return {\n        input: [\"B02\", \"B03\", \"B04\", \"B08\", \"B11\", \"B12\", \"dataMask\"],\n        output: { bands: 4 }\n      };\n}\n\nfunction evaluatePixel(samples) {\n\tvar NDWI=index(samples.B03, samples.B08); \n\tvar NDVI=index(samples.B08, samples.B04);\n\tvar INDEX= ((samples.B11 - samples.B12) / (samples.B11 + samples.B12))+(samples.B08);\n\n  \tif((INDEX>0.1)||(samples.B02>0.1)||(samples.B11<0.1)||(NDVI>0.3)||(NDWI > 0.1)){\n  \t\treturn[2.5*samples.B04, 2.5*samples.B03, 2.5*samples.B02, samples.dataMask]\n\t}\n\telse {\n \treturn [1, 0, 0, samples.dataMask]\n\t}\n}",
                "legend": {
                    "type": "discrete",
                    "items": [
                        {
                            "color": "rgb(100%, 0%, 0%)",
                            "label": "Burned"
                        }
                    ]
                }
            }
        ],
        "orderHint": 0,
        "instance": {
            "@id": "https://services.sentinel-hub.com/configuration/v1/wms/instances/146ebe-YOUR-INSTANCEID-HERE"
        },
        "lastUpdated": "2020-04-09T14:24:38.306505Z",
        "dataset": {
            "@id": "https://services.sentinel-hub.com/configuration/v1/datasets/S2L1C"
        },
        "datasetSource": {
            "@id": "https://services.sentinel-hub.com/configuration/v1/datasets/S2L1C/sources/1"
        },
        "defaultStyleName": "default",
        "datasourceDefaults": {
            "mosaickingOrder": "mostRecent",
            "temporal": false,
            "maxCloudCoverage": 50,
            "type": "S2L1C"
        }
    },
    {
        "@id": "https://services.sentinel-hub.com/configuration/v1/wms/instances/146ebe-YOUR-INSTANCEID-HERE/layers/MOISTURE-INDEX",
        "id": "MOISTURE-INDEX",
        "title": "Moisture Index",
        "description": "Based on combination of bands (B8A - B11)/(B8A + B11)",
        "styles": [
            {
                "name": "default",
                "description": "Default layer style",
                "evalScript": "//VERSION=3\nconst moistureRamps = [\n  [-0.8, 0x800000],\n  [-0.24, 0xff0000],\n  [-0.032, 0xffff00],\n  [0.032, 0x00ffff],\n  [0.24, 0x0000ff],\n  [0.8, 0x000080],\n];\n\nconst viz = new ColorRampVisualizer(moistureRamps);\n\nfunction setup() {\n  return {\n    input: [\"B03\", \"B04\", \"B8A\", \"B11\", \"dataMask\"],\n    output: [\n      { id: \"default\", bands: 4 },\n      { id: \"index\", bands: 1, sampleType: \"FLOAT32\" },\n      { id: \"eobrowserStats\", bands: 2, sampleType: \"FLOAT32\" },\n      { id: \"dataMask\", bands: 1 },\n    ],\n  };\n}\n\nfunction evaluatePixel(samples) {\n  let val = index(samples.B8A, samples.B11);\n  // The library for tiffs works well only if there is only one channel returned.\n  // So we encode the \"no data\" as NaN here and ignore NaNs on frontend.\n  const indexVal = samples.dataMask === 1 ? val : NaN;\n  return {\n    default: [...viz.process(val), samples.dataMask],\n    index: [indexVal],\n    eobrowserStats: [val, isCloud(samples) ? 1 : 0],\n    dataMask: [samples.dataMask],\n  };\n}\n\nfunction isCloud(samples) {\n  const NGDR = index(samples.B03, samples.B04);\n  const bRatio = (samples.B03 - 0.175) / (0.39 - 0.175);\n  return bRatio > 1 || (bRatio > 0 && NGDR > 0);\n}\n"
            }
        ],
        "orderHint": 0,
        "instance": {
            "@id": "https://services.sentinel-hub.com/configuration/v1/wms/instances/146ebe-YOUR-INSTANCEID-HERE"
        },
        "lastUpdated": "2020-04-09T14:24:38.312431Z",
        "dataset": {
            "@id": "https://services.sentinel-hub.com/configuration/v1/datasets/S2L1C"
        },
        "datasetSource": {
            "@id": "https://services.sentinel-hub.com/configuration/v1/datasets/S2L1C/sources/1"
        },
        "defaultStyleName": "default",
        "datasourceDefaults": {
            "mosaickingOrder": "mostRecent",
            "temporal": false,
            "maxCloudCoverage": 50,
            "type": "S2L1C"
        }
    },
    {
        "@id": "https://services.sentinel-hub.com/configuration/v1/wms/instances/146ebe-YOUR-INSTANCEID-HERE/layers/NORMALIZED-BURN-RATIO",
        "id": "NORMALIZED-BURN-RATIO",
        "title": "Normalized Burn Ratio (NBR)",
        "description": "Based on the combination of bands (B08 - B12)/(B08 + B12)",
        "styles": [
            {
                "name": "default",
                "description": "Default layer style",
                "evalScript": "//VERSION=3\n\nlet viz = ColorGradientVisualizer.createRedTemperature(-0.89, 0.89);\n\nfunction setup() {\n  return {\n    input: [\n      {\n        bands: [\"B03\", \"B04\", \"B08\", \"B12\", \"dataMask\"],\n      },\n    ],\n    output: [\n      { id: \"default\", bands: 4 },\n      { id: \"index\", bands: 1, sampleType: \"FLOAT32\" },\n      { id: \"eobrowserStats\", bands: 2, sampleType: \"FLOAT32\" },\n      { id: \"dataMask\", bands: 1 },\n    ],\n  };\n}\n\nfunction evaluatePixel(samples) {\n  let val = index(samples.B08, samples.B12);\n  let imgVals = null;\n  // The library for tiffs works well only if there is only one channel returned.\n  // So we encode the \"no data\" as NaN here and ignore NaNs on frontend.\n  const indexVal = samples.dataMask === 1 ? val : NaN;\n  imgVals = [...viz.process(val), samples.dataMask];\n  return {\n    default: imgVals,\n    index: [indexVal],\n    eobrowserStats: [val, isCloud(samples) ? 1 : 0],\n    dataMask: [samples.dataMask],\n  };\n}\n\nfunction isCloud(samples) {\n  const NGDR = index(samples.B03, samples.B04);\n  const bRatio = (samples.B03 - 0.175) / (0.39 - 0.175);\n  return bRatio > 1 || (bRatio > 0 && NGDR > 0);\n}",
                "legend": {
                    "type": "continuous",
                    "gradients": [
                        {
                            "color": "rgb(100%,100%,100%)",
                            "position": 0
                        },
                        {
                            "color": "rgb(100%,53%,0%)",
                            "position": 0.25
                        },
                        {
                            "color": "rgb(100%,43%,0%)",
                            "position": 0.3
                        },
                        {
                            "color": "rgb(68%, 0%,0%)",
                            "position": 0.525
                        },
                        {
                            "color": "rgb(0%,0%,0%)",
                            "position": 1
                        }
                    ],
                    "maxPosition": 1,
                    "minPosition": 0
                }
            }
        ],
        "orderHint": 0,
        "instance": {
            "@id": "https://services.sentinel-hub.com/configuration/v1/wms/instances/146ebe-YOUR-INSTANCEID-HERE"
        },
        "lastUpdated": "2020-04-09T14:24:38.317330Z",
        "dataset": {
            "@id": "https://services.sentinel-hub.com/configuration/v1/datasets/S2L1C"
        },
        "datasetSource": {
            "@id": "https://services.sentinel-hub.com/configuration/v1/datasets/S2L1C/sources/1"
        },
        "defaultStyleName": "default",
        "datasourceDefaults": {
            "mosaickingOrder": "mostRecent",
            "temporal": false,
            "maxCloudCoverage": 20,
            "type": "S2L1C"
        }
    },
    {
        "@id": "https://services.sentinel-hub.com/configuration/v1/wms/instances/146ebe-YOUR-INSTANCEID-HERE/layers/NORMALIZED-DIFFERENCE-VEGETATION-INDEX-NDVI",
        "id": "NORMALIZED-DIFFERENCE-VEGETATION-INDEX-NDVI",
        "title": "Normalized Difference Vegetation Index (NDVI)",
        "description": "Based on the combination of bands (B8 - B4)/(B8 + B4)",
        "styles": [
            {
                "name": "default",
                "description": "Default layer style",
                "evalScript": "//VERSION=3\n\nfunction setup() {\n  return {\n    input: [\"B03\", \"B04\", \"B08\", \"dataMask\"],\n    output: [\n      { id: \"default\", bands: 4 },\n      { id: \"index\", bands: 1, sampleType: \"FLOAT32\" },\n      { id: \"eobrowserStats\", bands: 2, sampleType: \"FLOAT32\" },\n      { id: \"dataMask\", bands: 1 },\n    ],\n  };\n}\n\nfunction evaluatePixel(samples) {\n  let val = index(samples.B08, samples.B04);\n  let imgVals = null;\n  // The library for tiffs works well only if there is only one channel returned.\n  // So we encode the \"no data\" as NaN here and ignore NaNs on frontend.\n  const indexVal = samples.dataMask === 1 ? val : NaN;\n\n  if (val < -0.5) imgVals = [0.05, 0.05, 0.05, samples.dataMask];\n  else if (val < -0.2) imgVals = [0.75, 0.75, 0.75, samples.dataMask];\n  else if (val < -0.1) imgVals = [0.86, 0.86, 0.86, samples.dataMask];\n  else if (val < 0) imgVals = [0.92, 0.92, 0.92, samples.dataMask];\n  else if (val < 0.025) imgVals = [1, 0.98, 0.8, samples.dataMask];\n  else if (val < 0.05) imgVals = [0.93, 0.91, 0.71, samples.dataMask];\n  else if (val < 0.075) imgVals = [0.87, 0.85, 0.61, samples.dataMask];\n  else if (val < 0.1) imgVals = [0.8, 0.78, 0.51, samples.dataMask];\n  else if (val < 0.125) imgVals = [0.74, 0.72, 0.42, samples.dataMask];\n  else if (val < 0.15) imgVals = [0.69, 0.76, 0.38, samples.dataMask];\n  else if (val < 0.175) imgVals = [0.64, 0.8, 0.35, samples.dataMask];\n  else if (val < 0.2) imgVals = [0.57, 0.75, 0.32, samples.dataMask];\n  else if (val < 0.25) imgVals = [0.5, 0.7, 0.28, samples.dataMask];\n  else if (val < 0.3) imgVals = [0.44, 0.64, 0.25, samples.dataMask];\n  else if (val < 0.35) imgVals = [0.38, 0.59, 0.21, samples.dataMask];\n  else if (val < 0.4) imgVals = [0.31, 0.54, 0.18, samples.dataMask];\n  else if (val < 0.45) imgVals = [0.25, 0.49, 0.14, samples.dataMask];\n  else if (val < 0.5) imgVals = [0.19, 0.43, 0.11, samples.dataMask];\n  else if (val < 0.55) imgVals = [0.13, 0.38, 0.07, samples.dataMask];\n  else if (val < 0.6) imgVals = [0.06, 0.33, 0.04, samples.dataMask];\n  else imgVals = [0, 0.27, 0, samples.dataMask];\n\n  return {\n    default: imgVals,\n    index: [indexVal],\n    eobrowserStats: [val, isCloud(samples) ? 1 : 0],\n    dataMask: [samples.dataMask],\n  };\n}\n\nfunction isCloud(samples) {\n  const NGDR = index(samples.B03, samples.B04);\n  const bRatio = (samples.B03 - 0.175) / (0.39 - 0.175);\n  return bRatio > 1 || (bRatio > 0 && NGDR > 0);\n}\n",
                "legend": {
                    "type": "continuous",
                    "gradients": [
                        {
                            "color": "rgb(0%,0%,0%)",
                            "label": "- 1.0",
                            "position": 0.05
                        },
                        {
                            "color": "rgb(75%,75%,75%)",
                            "position": 0.050001
                        },
                        {
                            "color": "rgb(75%,75%,75%)",
                            "position": 0.1
                        },
                        {
                            "color": "rgb(86%,86%,86%)",
                            "position": 0.10001
                        },
                        {
                            "color": "rgb(86%,86%,86%)",
                            "position": 0.15
                        },
                        {
                            "color": "rgb(100%,100%,88%)",
                            "position": 0.150001
                        },
                        {
                            "color": "rgb(100%,100%,88%)",
                            "label": "0.0",
                            "position": 0.2
                        },
                        {
                            "color": "rgb(100%,98%,80%)",
                            "position": 0.20001
                        },
                        {
                            "color": "rgb(100%,98%,80%)",
                            "position": 0.25
                        },
                        {
                            "color": "rgb(93%,91%,71%)",
                            "position": 0.250001
                        },
                        {
                            "color": "rgb(93%,91%,71%)",
                            "position": 0.3
                        },
                        {
                            "color": "rgb(87%,85%,61%)",
                            "position": 0.30001
                        },
                        {
                            "color": "rgb(87%,85%,61%)",
                            "position": 0.35
                        },
                        {
                            "color": "rgb(80%,78%,51%)",
                            "position": 0.350001
                        },
                        {
                            "color": "rgb(80%,78%,51%)",
                            "position": 0.4
                        },
                        {
                            "color": "rgb(74%,72%,42%)",
                            "position": 0.40001
                        },
                        {
                            "color": "rgb(74%,72%,42%)",
                            "position": 0.45
                        },
                        {
                            "color": "rgb(69%,76%,38%)",
                            "position": 0.450001
                        },
                        {
                            "color": "rgb(69%,76%,38%)",
                            "position": 0.5
                        },
                        {
                            "color": "rgb(64%,80%,35%)",
                            "position": 0.50001
                        },
                        {
                            "color": "rgb(64%,80%,35%)",
                            "position": 0.55
                        },
                        {
                            "color": "rgb(57%,75%,32%)",
                            "position": 0.550001
                        },
                        {
                            "color": "rgb(57%,75%,32%)",
                            "label": "0.2",
                            "position": 0.6
                        },
                        {
                            "color": "rgb(50%,70%,28%)",
                            "position": 0.60001
                        },
                        {
                            "color": "rgb(50%,70%,28%)",
                            "position": 0.65
                        },
                        {
                            "color": "rgb(44%,64%,25%)",
                            "position": 0.650001
                        },
                        {
                            "color": "rgb(44%,64%,25%)",
                            "position": 0.7
                        },
                        {
                            "color": "rgb(38%,59%,21%)",
                            "position": 0.70001
                        },
                        {
                            "color": "rgb(38%,59%,21%)",
                            "position": 0.75
                        },
                        {
                            "color": "rgb(31%,54%,18%)",
                            "position": 0.750001
                        },
                        {
                            "color": "rgb(31%,54%,18%)",
                            "label": "0.4",
                            "position": 0.8
                        },
                        {
                            "color": "rgb(25%,49%,14%)",
                            "position": 0.80001
                        },
                        {
                            "color": "rgb(25%,49%,14%)",
                            "position": 0.85
                        },
                        {
                            "color": "rgb(19%,43%,11%)",
                            "position": 0.850001
                        },
                        {
                            "color": "rgb(19%,43%,11%)",
                            "position": 0.9
                        },
                        {
                            "color": "rgb(13%,38%,7%)",
                            "position": 0.90001
                        },
                        {
                            "color": "rgb(13%,38%,7%)",
                            "position": 0.95
                        },
                        {
                            "color": "rgb(6%,33%,4%)",
                            "position": 0.950001
                        },
                        {
                            "color": "rgb(6%,33%,4%)",
                            "position": 0.990001
                        },
                        {
                            "color": "rgb(0%,27%,0%)",
                            "position": 1
                        },
                        {
                            "color": "rgb(0%,27%,0%)",
                            "label": "1.0",
                            "position": 1.05
                        }
                    ],
                    "maxPosition": 1.05,
                    "minPosition": 0.05
                }
            }
        ],
        "orderHint": 0,
        "instance": {
            "@id": "https://services.sentinel-hub.com/configuration/v1/wms/instances/146ebe-YOUR-INSTANCEID-HERE"
        },
        "lastUpdated": "2020-04-09T14:24:38.322598Z",
        "dataset": {
            "@id": "https://services.sentinel-hub.com/configuration/v1/datasets/S2L1C"
        },
        "datasetSource": {
            "@id": "https://services.sentinel-hub.com/configuration/v1/datasets/S2L1C/sources/1"
        },
        "defaultStyleName": "default",
        "datasourceDefaults": {
            "mosaickingOrder": "mostRecent",
            "temporal": false,
            "maxCloudCoverage": 20,
            "type": "S2L1C"
        }
    },
    {
        "@id": "https://services.sentinel-hub.com/configuration/v1/wms/instances/146ebe-YOUR-INSTANCEID-HERE/layers/TRUE-COLOR",
        "id": "TRUE-COLOR",
        "title": "True Color",
        "description": "Based on bands 4,3,2",
        "styles": [
            {
                "name": "default",
                "description": "Default layer style",
                "evalScript": "//VERSION=3\nlet minVal = 0.0;\nlet maxVal = 0.4;\n\nlet viz = new HighlightCompressVisualizer(minVal, maxVal);\n\nfunction setup() {\n   return {\n    input: [\"B04\", \"B03\", \"B02\", \"dataMask\"],\n    output: { bands: 4 }\n  };\n}\n\nfunction evaluatePixel(samples) {\n    let val = [samples.B04, samples.B03, samples.B02, samples.dataMask];\n    return viz.processList(val);\n}\n\n\n"
            }
        ],
        "orderHint": 0,
        "instance": {
            "@id": "https://services.sentinel-hub.com/configuration/v1/wms/instances/146ebe-YOUR-INSTANCEID-HERE"
        },
        "lastUpdated": "2020-04-30T10:12:59.202449Z",
        "dataset": {
            "@id": "https://services.sentinel-hub.com/configuration/v1/datasets/S2L1C"
        },
        "datasetSource": {
            "@id": "https://services.sentinel-hub.com/configuration/v1/datasets/S2L1C/sources/1"
        },
        "defaultStyleName": "default",
        "datasourceDefaults": {
            "upsampling": "BICUBIC",
            "mosaickingOrder": "mostRecent",
            "temporal": false,
            "maxCloudCoverage": 20,
            "type": "S2L1C"
        }
    },
    {
        "@id": "https://services.sentinel-hub.com/configuration/v1/wms/instances/146ebe-YOUR-INSTANCEID-HERE/layers/WILDFIRES",
        "id": "WILDFIRES",
        "title": "Wildfires",
        "description": "",
        "styles": [
            {
                "name": "default",
                "description": "Default layer style",
                "evalScript": "// VERSION=3\n// QuickFire V1.0.0 by Pierre Markuse (https://twitter.com/Pierre_Markuse)\n// Made for use in the Sentinel Hub EO Browser (https://apps.sentinel-hub.com/eo-browser/?)\n// CC BY 4.0 International (https://creativecommons.org/licenses/by/4.0/)\n\nfunction setup() {\n  return {\n    input: [\"B01\",\"B02\",\"B03\",\"B04\",\"B08\",\"B8A\",\"B11\",\"B12\",\"CLP\", \"dataMask\"],\n    output: { bands: 4 }\n  };\n}\n\nfunction stretch(val, min, max) {return (val - min) / (max - min);} \n\nfunction satEnh(arr, s) {\n   var avg = arr.reduce((a, b) => a + b, 0) / arr.length;\n   return arr.map(a => avg * (1 - s) + a * s);\n}\n\n function layerBlend(lay1, lay2, lay3, op1, op2, op3) {\n    return lay1.map(function(num, index) {\n     return (num / 100 * op1 + (lay2[index] / 100 * op2) + (lay3[index] / 100 * op3));\n    });\n  }  \n\nfunction evaluatePixel(sample) {\n  const hsThreshold = [2.0, 1.5, 1.25, 1.0];\n  const hotspot = 1;\n  const style = 1;\n  const hsSensitivity = 1.0;\n  const boost = 1;\n  \n  const cloudAvoidance = 1;\n  const cloudAvoidanceThreshold = 245;\n  const avoidanceHelper = 0.8;\n\n  const offset = -0.000;\n  const saturation = 1.10;\n  const brightness = 1.00;\n  const sMin = 0.01;\n  const sMax = 0.99;\n  \n  const showBurnscars = 0;\n  const burnscarThreshold = -0.25;\n  const burnscarStrength = 0.3;\n\n  const NDWI = (sample.B03-sample.B08)/(sample.B03+sample.B08);\n  const NDVI = (sample.B08-sample.B04)/(sample.B08+sample.B04);\n  const waterHighlight = 0;\n  const waterBoost = 2.0;\n  const NDVI_threshold = -0.15;\n  const NDWI_threshold = 0.15;\n  const waterHelper = 0.2;\n  \n  const Black = [0, 0, 0];\n  const NBRindex = (sample.B08-sample.B12) / (sample.B08+sample.B12); \n  const naturalColorsCC = [Math.sqrt(brightness * sample.B04 + offset), Math.sqrt(brightness * sample.B03 + offset), Math.sqrt(brightness * sample.B02 + offset)];\n  const naturalColors = [(2.5 * brightness * sample.B04 + offset), (2.5 * brightness * sample.B03 + offset), (2.5 * brightness * sample.B02 + offset)];\n  const URBAN = [Math.sqrt(brightness * sample.B12 * 1.2 + offset), Math.sqrt(brightness * sample.B11 * 1.4 + offset), Math.sqrt(brightness * sample.B04 + offset)];\n  const SWIR = [Math.sqrt(brightness * sample.B12 + offset), Math.sqrt(brightness * sample.B8A + offset), Math.sqrt(brightness * sample.B04 + offset)];\n  const NIRblue = colorBlend(sample.B08, [0, 0.25, 1], [[0/255, 0/255, 0/255],[0/255, 100/255, 175/255],[150/255, 230/255, 255/255]]);\n  const classicFalse = [sample.B08 * brightness, sample.B04 * brightness, sample.B03 * brightness];\n  const NIR = [sample.B08 * brightness, sample.B08 * brightness, sample.B08 * brightness];\n  const atmoPen = [sample.B12 * brightness, sample.B11 * brightness, sample.B08 * brightness];\n  var enhNaturalColors = [0, 0, 0];\n  for (let i = 0; i < 3; i += 1) { enhNaturalColors[i] = (brightness * ((naturalColors[i] + naturalColorsCC[i]) / 2) + (URBAN[i] / 10)); }\n  \n  const manualCorrection = [0.00, 0.00, 0.00];\n  \n  var Viz = layerBlend(URBAN, naturalColors, naturalColorsCC, 10, 40, 50); // Choose visualization(s) and opacity here\n\n  if (waterHighlight) {\n    if ((NDVI < NDVI_threshold) && (NDWI > NDWI_threshold) && (sample.B04 < waterHelper)) {\n     Viz[1] = Viz[1] * 1.2 * waterBoost + 0.1;\n     Viz[2] = Viz[2] * 1.5 * waterBoost + 0.2;\n    }\n  } \n  \n  Viz = satEnh(Viz, saturation);\n  for (let i = 0; i < 3; i += 1) {\n    Viz[i] = stretch(Viz[i], sMin, sMax); \n    Viz[i] += manualCorrection[i];  \n  }\n\n  if (hotspot) {  \n    if ((!cloudAvoidance) || ((sample.CLP<cloudAvoidanceThreshold) && (sample.B02<avoidanceHelper))) {\n     switch (style) {\n       case 1:\n        if ((sample.B12 + sample.B11) > (hsThreshold[0] / hsSensitivity)) return [((boost * 0.50 * sample.B12)+Viz[0]), ((boost * 0.50 * sample.B11)+Viz[1]), Viz[2], sample.dataMask]; \n        if ((sample.B12 + sample.B11) > (hsThreshold[1] / hsSensitivity)) return [((boost * 0.50 * sample.B12)+Viz[0]), ((boost * 0.20 * sample.B11)+Viz[1]), Viz[2], sample.dataMask]; \n        if ((sample.B12 + sample.B11) > (hsThreshold[2] / hsSensitivity)) return [((boost * 0.50 * sample.B12)+Viz[0]), ((boost * 0.10 * sample.B11)+Viz[1]), Viz[2], sample.dataMask];  \n        if ((sample.B12 + sample.B11) > (hsThreshold[3] / hsSensitivity)) return [((boost * 0.50 * sample.B12)+Viz[0]), ((boost * 0.00 * sample.B11)+Viz[1]), Viz[2], sample.dataMask]; \n       break;\n       case 2:\n        if ((sample.B12 + sample.B11) > (hsThreshold[3] / hsSensitivity)) return [1, 0, 0, sample.dataMask]; \n       break;\n       case 3:\n        if ((sample.B12 + sample.B11) > (hsThreshold[3] / hsSensitivity)) return [1, 1, 0, sample.dataMask]; \n       break;\n       case 4:  \n        if ((sample.B12 + sample.B11) > (hsThreshold[3] / hsSensitivity)) return [Viz[0] + 0.2, Viz[1] - 0.2, Viz[2] - 0.2, sample.dataMask];\n       break;\n       default:\n      }\n    }\n  }\n\n  if (showBurnscars) {\n   if (NBRindex<burnscarThreshold) {\n     Viz[0] = Viz[0] + burnscarStrength;\n     Viz[1] = Viz[1] + burnscarStrength;\n   }\n  }\n\n  return [Viz[0], Viz[1], Viz[2], sample.dataMask];\n}\n"
            }
        ],
        "orderHint": 0,
        "instance": {
            "@id": "https://services.sentinel-hub.com/configuration/v1/wms/instances/146ebe-YOUR-INSTANCEID-HERE"
        },
        "lastUpdated": "2020-04-09T14:24:38.366905Z",
        "dataset": {
            "@id": "https://services.sentinel-hub.com/configuration/v1/datasets/S2L1C"
        },
        "datasetSource": {
            "@id": "https://services.sentinel-hub.com/configuration/v1/datasets/S2L1C/sources/1"
        },
        "defaultStyleName": "default",
        "datasourceDefaults": {
            "mosaickingOrder": "mostRecent",
            "temporal": false,
            "maxCloudCoverage": 50,
            "type": "S2L1C"
        }
    }
]